
;;;;;;;;;;;;;;;
;; Matrix.nls
;;;;;;;;;;;;;;;



to matrix:set-diag [m l]
  let i 0
  repeat length matrix:get-row m 0 [
    matrix:set m i i item i l
    set i i + 1
  ]
end


to matrix:set-diag-scalar [m s]
  ; for a square matrix
  let i 0
  repeat length matrix:get-row m 0 [
    matrix:set m i i s
    set i i + 1
  ]
end


;;
; set a submatrix, in the same fashion as the primitive matrix:submatrix (i.e. r1 <= r < r2 and c1 <= c < c2 - RQ : r2,c2 not needed !)
to matrix:set-submatrix [m r c submat]
  let i 0
  repeat length matrix:get-column submat 0 [
    let j 0
    repeat length matrix:get-row submat 0 [
      matrix:set m (r + i) (c + j) (matrix:get submat i j)
      set j j + 1
    ]
    set i i + 1
  ]
end

;;
; idem, given row and column list
to matrix:set-submatrix-indices [m row-list col-list submat]
  let dims matrix:dimensions submat
  if first dims != length row-list or last dims != length col-list [error (word "Error in setting submat : wrong indices dimensions : rowlist has " length row-list " ; col-list has " length col-list " ; submat " dims)]
  let i 0
  repeat length matrix:get-column submat 0 [
    let j 0
    repeat length matrix:get-row submat 0 [
      matrix:set m (item i row-list) (item j col-list) (matrix:get submat i j)
      set j j + 1
    ]
    set i i + 1
  ]
end



;;
; transforms a list into a column matrix
to-report matrix:as-column-matrix [l]
  report matrix:from-row-list map [(list ?)] l
end


;;
; sum of elements of a matrix
to-report matrix:sum [m]
  ;report sum map sum matrix:to-row-list m
  ; not efficient with large matrices ?
  let dim matrix:dimensions m
  report matrix:get matrix:times (matrix:make-constant 1 (first dim) 1) (matrix:times m (matrix:make-constant (last dim) 1 1)) 0 0
end


to-report matrix:mean [m]
  let dim matrix:dimensions m
  report  (matrix:sum m) / ((first dim) * (last dim))
end



;;
; create a diagonal matrix from a list
to-report matrix:make-diag [l]
  let n length l
  let res matrix:make-constant n n 0
  let i 0
  foreach l [matrix:set res i i ? set i i + 1]
  report res
end




;;
; Get sparse row given column indexes
to-report matrix:get-sparse-row [m row col-inds]
  let res []
  foreach col-inds [
    set res lput matrix:get m row ? res
  ]
  report res
end

;;
; Get sparse column
to-report matrix:get-sparse-column [m column row-inds]
  let res []
  foreach row-inds [
    set res lput matrix:get m column ? res
  ]
  report res
end



;;
; Sparse submatrix
;
; @reports matrix
to-report matrix:sparse-submatrix [m rows columns]
  let list-res []
  foreach rows [
    let i ?
    let r []
    foreach columns [
      set r lput matrix:get m i ? r
    ]
    set list-res lput r list-res
  ]
  report matrix:from-row-list list-res
end

;;
; Minimum of a matrix
;
; @reports [min , [i_min,j_min]]
to-report matrix:min [m]
  let dims matrix:dimensions m let n first dims let p last dims
  let mi matrix:get m 0 0 let imin 0 let jmin 0
  let i 0 let j 0
  repeat n [
    set j 0
    repeat p [
      let v matrix:get m i j
      if v < mi [set mi v set imin i set jmin j]
      set j j + 1
    ]
    set i i + 1
  ]
  report (list mi (list imin jmin))
;  let rows matrix:to-row-list m
;  let mins map min rows
;  let mi min mins
;  let imin position mi mins
;  let jmin position mi (item imin rows)
;  report (list mi (list imin jmin))
end
