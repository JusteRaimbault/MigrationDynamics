// variables
val costAccessRatio = Val[Double]
val wealthSigma = Val[Double]
val accDecay = Val[Double]
val moveAversion = Val[Double]

// indicators
val wealth = Val[Double]
val wealthGain = Val[Double]
val migration0 = Val[Double]
val migration1 = Val[Double]
val deltaU0 = Val[Double]
val deltaU1 = Val[Double]
val jobDistance0 = Val[Double]
val jobDistance1 = Val[Double]
val indivMigrations = Val[Double]

val id = Val[Int]
val replication = Val[Int]

// setup-experiment [costacc-ratio wealthdistrib-sigma acc-decay mov-aversion]
val cmds = Seq("setup-experiment ${costAccessRatio} ${wealthSigma} ${accDecay} ${moveAversion}","go-experiment")

val model =
NetLogo5Task.workspace(workDirectory,"HEADLESS_Mingong.nlogo",cmds) set(
    inputs += (costAccessRatio,wealthSigma,accDecay,moveAversion),
    outputs += (costAccessRatio,wealthSigma,accDecay,moveAversion),
    netLogoOutputs += ("total-wealth", wealth),
    netLogoOutputs += ("get-total-wealth-gain", wealthGain),
    netLogoOutputs += ("migration-0", migration0),
    netLogoOutputs += ("migration-1", migration1),
    netLogoOutputs += ("delta-u-0", deltaU0),
    netLogoOutputs += ("delta-u-1", deltaU1),
    netLogoOutputs += ("job-distance-0", jobDistance0),
    netLogoOutputs += ("job-distance-1", jobDistance1),
    netLogoOutputs += ("mean-individual-migrations", indivMigrations)
)
