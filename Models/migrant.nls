
;;
; migrant





;;
; 
to new-migrants-arrival
  
  output-print "... new migrants"
  
  ; TODO initial number different from migration rate to see effective evolution of wealth ?
  ; TODO control migration on available jobs to avoid death ? -> add effective jobs around in utility ? .. already in accessibility, an other way. ..
  
  
  create-migrants (floor total-population * migration-growth-share / 100) [
    new-migrant
  ]
  
end



;;
; migrant constructor
to new-migrant
  
  set shape "person" set size 1.5
  
  ; social network
  set social-category migrant-social-category
  
  ; positioning : social network
  let initial-residence-position migrant-initial-residence
  setxy first initial-residence-position last initial-residence-position
  
  ; wealth and economic category
  set wealth migrant-initial-wealth
  set economic-category migrant-economic-category
  
  
  set color (social-category * 140 / #-social-categories) + 10
  
  set job-patch nobody
  find-job
  
end


;;
; initial distribution of wealth
to-report migrant-initial-wealth
  if wealth-distribution = "log-normal" [
    report max (list uniform-wealth-min (exp (random-normal lognormal-wealth-logmean lognormal-wealth-logsigma)))
  ]
  if wealth-distribution = "uniform" [
    report uniform-wealth-min + (random-float (uniform-wealth-max - uniform-wealth-min))
  ]
  report 0
end



;;
;  social category
to-report migrant-social-category
  if social-categories = "discrete" [
    let cat random #-social-categories
    if not table:has-key? migrant-count cat [table:put migrant-count cat 0] table:put migrant-count cat ((table:get migrant-count cat) + 1)
    report cat
  ]
  
  ; TODO : continuous social proximity
  
  ; TODO : real-like social network
  
  report 0
end



;;
;  Computes economic category from wealth
to-report migrant-economic-category
  let res 0
  let cat 0 foreach economic-categories-breaks [if wealth < ? [set res cat] set cat cat + 1]
  report res
end



to-report migrant-initial-residence
  let p one-of patches let ma max [population] of patches
  ifelse table:get migrant-count social-category < migrant-initial-position-aggregation-threshold [
    set p one-of patches with [population > ma / 10]
  ][
    ; let do it brutally (needs spatial smoothing)
    let s social-category
    set p one-of (patches with [population > ma / 10]) with-max [count (migrants in-radius 3) with [social-category = s]]
  ]
  report (list ([pxcor] of p - 0.5 + random-float 1) ([pycor] of p - 0.5 + random-float 1))
end


;;
; migration movement
to move
  move-to item destination patch-list setxy xcor - 0.5 + random-float 1 ycor - 0.5 + random-float 1
  find-job
  update-wealth
end


to find-job
  ; removes old job
  if job-patch != nobody [ask job-patch [set available-jobs replace-item ([economic-category] of myself) available-jobs (item ([economic-category] of myself) available-jobs + 1)]]
  
  ; find new job
  set job-patch one-of (patches in-radius job-searching-radius) with [item [economic-category] of myself available-jobs >= 1]
  ifelse job-patch = nobody [die][
    ; TODO precise the rationale here -- we have no cost of transportation in the utility ; may be useful to add it ?
    ; -> mvt forcÃ© ; ou commuting plus long
    ask job-patch [set available-jobs replace-item ([economic-category] of myself) available-jobs (item ([economic-category] of myself) available-jobs - 1)]
  ]
end

to update-wealth
  
  ; update wealth -> what eq ?
  ;  life cost is consistent
  set wealth wealth * (1 + [life-cost] of patch-here) ; add a constant dimensionnal parameter
  
  set economic-category migrant-economic-category
  
end






